import experimentos.circuito.*
import experimentos.bateria.*
import experimentos.shock.*
import rick.*
import materiales.lata.*
import materiales.cable.*
import materiales.fleeb.*
import materiales.materia_oscura.*
import materiales.estrategia.alAzar.*
import materiales.estrategia.menorCantidadMetal.*
import materiales.estrategia.mejorGenerador.*
import materiales.estrategia.ecologico.*

	
describe "Tests parte 2"{
	
	test "Circuito: Mochila NO cumpleRequisitos" {
		var mochila = [new Lata(10)] 
		assert.throwsExceptionWithMessage("Materiales insuficientes", {circuito.cumpleRequisitos(mochila,alAzar)})
		//assert.notThat(circuito.cumpleRequisitos(mochila,alAzar))
	}
	
	test "Circuito: Mochila SI cumpleRequisitos" {
		//Cable con 2 de seccion conduce 6 (3*seccion)
		var mochila = [new Lata(10),new Cable(10,2)] 
		assert.that(circuito.cumpleRequisitos(mochila,alAzar))
	}
	
	test "Circuito: materialesQueRequiere NO devuelve materiales"{
		var mochila = [new Lata(10),new Lata(5)] 
		assert.throwsExceptionWithMessage("Materiales insuficientes", {circuito.materialesQueRequiere(mochila,alAzar)})
		//assert.equals([],circuito.materialesQueRequiere(mochila,alAzar))
	}
	
	//si uso estrategia al azar deberia devolver un objeto cualquiera que cumpla el criterio
	test "Circuito: materialesQueRequiere SI devuelve materiales"{
		var unCable=new Cable(10,2)
		var otroCable = new Cable(10,3)
		var mochila = [new Lata(10),unCable,otroCable] 
		assert.equals(circuito.materialesQueRequiere(mochila,alAzar).size()==1)
	}
	
	
	test "Circuito: Realizar"{
		var cable1 = new Cable(10,5)
		var lata1 = new Lata(300)
		var materiaOscura = new MateriaOscura(new Cable(5,3))
		rick.recibir([cable1,lata1,materiaOscura])
		assert.equals(3,rick.mochila().size())
		circuito.realizar(rick)
		assert.that(rick.mochila().contains(materiaOscura))
		assert.equals(3,rick.mochila().size())
	}
	

}
