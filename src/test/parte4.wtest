import companieros.companiero.*
import materiales.parasitosAlienigenas.*
import acciones.acciones.*
import rick.*
import experimentos.circuito.*
import experimentos.bateria.*
import experimentos.shock.*
import materiales.lata.*
import materiales.cable.*
import materiales.fleeb.*
import materiales.materia_oscura.*
import materiales.estrategia.alAzar.*
import materiales.estrategia.menorCantidadMetal.*
import materiales.estrategia.mejorGenerador.*
import materiales.estrategia.ecologico.*


test "Parasito alienigena se agrego a la mochila" {
		var pa=new ParasitoAlienigena([])
		morty.recolectar(pa)
		assert.that(morty.mochila().contains(pa))
}

test "PA cambio comportamiento" {
		var unMaterial= new Lata (10)
		var quique = new Companiero(50) // al elegir un compa単ero habria que crear metodo recibir
		var accion1 = new RecolectarMaterialOculto(unMaterial)
		var accion2 = new EntregarTodo(rick)
		var accion3 = new RecolectarMaterialOculto(unMaterial)
		var accion4 = new ModificarEnergia(10)
		
		var pa=new ParasitoAlienigena([accion1,accion2,accion3,accion4])
		assert.equals(100,morty.energia())
		morty.recolectar(pa)
		assert.equals(80,morty.energia())
}

test "Accion Entregar Todo" {
		var a= new Lata (10)
		var b= new Lata (10)
		
		var pepe= new Companiero(50) // al elegir un compa単ero habria que crear metodo recibir
		
		var accion = new EntregarTodo(rick)
		
		var pa=new ParasitoAlienigena([accion])
		
		assert.that(rick.mochila().isEmpty())
		
		morty.recolectar(a)
		morty.recolectar(b)
		morty.recolectar(pa)

		assert.equals([],morty.mochila())
		assert.equals([a,b,pa],rick.mochila())
}

test "Accion Quitar Uno al azar" {
		var a= new Lata (10)
		var b= new Lata (10)
		var pepe= new Companiero(50) // al elegir un compa単ero habria que crear metodo recibir
		
		var accion = new QuitarUnoAlAzar()
		var pa=new ParasitoAlienigena([accion])
		

		morty.recolectar(a)
		morty.recolectar(b)
		morty.recolectar(pa)

		assert.equals(2,morty.mochila().size())
}

test "Accion : Modificar energia"{
		var pepe= new Companiero(50) // al elegir un compa単ero habria que crear metodo recibir
		
		var accion = new ModificarEnergia(-5)
		var pa=new ParasitoAlienigena([accion])
		
		assert.equals(100,morty.energia())
		morty.recolectar(pa)	//pierde 10 de energia al recolectar
		assert.equals(85,morty.energia())
}

test "Accion : Recolectar material oculto"{
		var lata =new Lata(1)
		
		var accion = new RecolectarMaterialOculto([lata])
		var pa=new ParasitoAlienigena([accion])
		
		assert.equals([],morty.mochila())

}

//-------- Estrategias ------------


test "Bateria con estrategia menorCantidadMetal" {
		var unaLata = new Lata(250)
		var otraLata= new Lata(201)
		var otraLataMas = new Lata(250)
		var mochila = [unaLata,otraLata,otraLataMas] 
		assert.equals([otraLata],bateria.materialesQueRequiere(mochila,menorCantidadMetal))
	}

	test "Bateria con estrategia mejorGenerador" {
		var cable = new Cable(10,2)
		var lata = new Lata(300)
		var otraLata = new Lata(350)
		rick.recibir([cable,lata,otraLata])
		bateria.realizar(rick)
		assert.equals([bateria],bateria.materialesQueRequiere(rick.mochila(),mejorGenerador))
	}
	
	test "Bateria con estrategia ecologico"{
		var cable = new Cable(10,7)
		var lata = new Lata(300)
		var unFleeb = new Fleeb(12)
		unFleeb.comerMaterial(lata)
		var otraLata = new Lata(350)
		var otroCable = new Cable(5,4)
		rick.recibir([cable,unFleeb,otraLata,otroCable])
		assert.equals([unFleeb],bateria.materialesQueRequiere(rick.mochila(),ecologico))
	}

 //----------------------------------